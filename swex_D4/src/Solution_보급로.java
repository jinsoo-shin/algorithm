import java.io.*;
import java.util.*;

public class Solution_보급로 {
//	public class Solution {
	public static void main(String[] args) throws Exception {
//		String src = "1\r\n" + "4\r\n" + "0100\r\n" + "1110\r\n" + "1011\r\n" + "1010";
		String src = "1\r\n" + "64\r\n" + "0769666101487706559574756141976704317737801475184420628045371335\r\n"
				+ "7070213402265683469583997627315823991595457710862957245214737071\r\n"
				+ "2237556382489613096780549759306370500821187966155648212857535152\r\n"
				+ "6313346195314339359241574122679577581906152647347665241512904873\r\n"
				+ "1885202574713062175222944237402969865750419555713704458675709731\r\n"
				+ "0212682193888247135475052540613717795239066527907972582911270882\r\n"
				+ "2997996962957364016406773344363519694925173632786094878623012511\r\n"
				+ "7990015237738817882032012281231443545567777934264584701889373104\r\n"
				+ "9326326172668859196183228265643125433244108011027758711599101839\r\n"
				+ "1109291637720150642457984119290617446227782592701823234816235072\r\n"
				+ "1579656325808995274879997678590593494772681758988722491849680057\r\n"
				+ "4561644102365753777974511624933186464659831161646549274346454952\r\n"
				+ "7182060116355720714754455321637170713061752274000002552749553334\r\n"
				+ "4596500726782756159648163470758125969162689447254246120767789367\r\n"
				+ "5896376963590905658736049818260330600097694132695146228831272189\r\n"
				+ "5810493297189790002786162755836492407838886912145654546601106103\r\n"
				+ "0002826313697552970471609539860319564773629358072440157397894932\r\n"
				+ "7963599817925814620530260439056051982556025498590909636240086164\r\n"
				+ "3354718727097098211981495920437125736685434290605872243107238742\r\n"
				+ "3687364308548416933046009194180708716984700821329917874052489667\r\n"
				+ "6364526575900701134233237187935670438758665878703410561371624059\r\n"
				+ "5055102709769997115752707300857740265859946645717336717600191490\r\n"
				+ "9572654192787885213625213170280702780946101730370427807543468242\r\n"
				+ "2239579872144736408497180435788800593307869611842572370554964476\r\n"
				+ "2793468193272656360324135093303477000822059832795926944129094511\r\n"
				+ "6668891076916773086800814663911006052021539511239253549133276661\r\n"
				+ "0254154712296813897878444614936941683514557594342527860793189285\r\n"
				+ "9526320781581787892717867404861114678837201862376807387651197507\r\n"
				+ "2093406710567420546729703692116620608683162534860166347436858725\r\n"
				+ "3097444383918879216409415684271310152508855524056250271858491293\r\n"
				+ "0138570376107942053771270420587909631295222633713971593185515569\r\n"
				+ "8351657298587447161163252909987467502278908311179648615102655319\r\n"
				+ "6793960132433639107876751588245602512973736614298856962096464688\r\n"
				+ "8960213099755910941357558355638602199116150599110769964777709182\r\n"
				+ "0899872379271513031399724832375776761485010411411161950565761420\r\n"
				+ "0746620364583469690819378064522333109540322368697301527423568784\r\n"
				+ "5399862778546382921432751578273069506994041074251620930248509624\r\n"
				+ "8191362168359392256799428158520104044259798002601628892200400755\r\n"
				+ "2693314557960555015268124576170955357122247733602045310411727042\r\n"
				+ "5778693257532140107894273685464491688168015515416772001000641252\r\n"
				+ "1695624320250904369909426092816618229647429134781568333896717163\r\n"
				+ "9109939197192054303801383836043618785627257691841683796063793707\r\n"
				+ "3797954537228046036803372300243878357510901897672611515695755574\r\n"
				+ "6805544244516460096322180593126585229015536802170297310759324407\r\n"
				+ "3330923729535491185188254022281057255441690471158514310658183287\r\n"
				+ "2598926653154687432032284893925825566764095060922912242760492854\r\n"
				+ "9217876997139219072912782491659233045439179039369381144847896891\r\n"
				+ "3892337142095880509300381978189753976031176831470672686416557046\r\n"
				+ "7730025169623848749405208796517670163110168055245566155742567423\r\n"
				+ "7067675122397503344734605160747177467556344937824599117097827616\r\n"
				+ "1810130350861389498012484025864087492441182133937157942291242459\r\n"
				+ "6005522293819909495154684059413221719928497822847505910377833718\r\n"
				+ "8850481387736414422873448130184436775374713949219408785350311182\r\n"
				+ "3258066479121605459706996841444691899241004508669032689594181703\r\n"
				+ "9340176432772338434017237325553684716344892419462059189715834914\r\n"
				+ "8310251788032603966081145862379384019308013750163400652248702723\r\n"
				+ "2156769168683163866792116742934627173627025205406496406710478084\r\n"
				+ "4842433140389220960864897022122545774825629990547865963573404536\r\n"
				+ "3446658852606509880124605379147463924524601014214489744946232932\r\n"
				+ "1154226430852047433407210385612850908673722181886225365667825293\r\n"
				+ "0235223928937552440785386014049244627443636209906340069740266819\r\n"
				+ "1161744816382164619215110159706473135710967817782786055242755102\r\n"
				+ "4642974007739615808389677025534456472839521198453979153576028212\r\n"
				+ "6325675967493118778337256142618362387871804582664316619390184400\r\n";
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		br = new BufferedReader(new StringReader(src));

		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			N = Integer.parseInt(br.readLine());
			ans = 0;
			map = new int[N][N];
			for (int i = 0; i < N; i++) {
				String[] tmp = br.readLine().split("");
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(tmp[j]);
				}
			}
//			for (int[] row : map) {
//				System.out.println(Arrays.toString(row));
//			}
			System.out.println("-------");
			int[][] dp = new int[N][N];
			for (int i = 1; i < N; i++) {
				map[0][i] += map[0][i - 1];
				map[i][0] += map[i - 1][0];
			}

			for (int i = 1; i < N; i++) {
				for (int j = 1; j < N; j++) {
					map[i][j] = Math.min(map[i][j] + map[i - 1][j], map[i][j] + map[i][j - 1]);
				}
			}
//			for (int[] row : map) {
//				System.out.println(Arrays.toString(row));
//			}
			System.out.println(map[N - 1][N - 1]);
			System.out.println("#" + tc + " " + ans);
		}
	}

	static int N, ans;
	static int map[][];

	static void dp() {

	}
}
